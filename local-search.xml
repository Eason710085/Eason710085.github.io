<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nano实现代码高亮</title>
    <link href="/2022/02/11/nano%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
    <url>/2022/02/11/nano%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="nano实现代码高亮"><a href="#nano实现代码高亮" class="headerlink" title="nano实现代码高亮"></a>nano实现代码高亮</h2><h3 id="更新nano"><a href="#更新nano" class="headerlink" title="更新nano"></a>更新nano</h3><p>vim命令太复杂了，暂时先用Mac自带的nano吧。</p><p>nano的版本模式是4.3 可以先升级一下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install nano<br>nano --version<br>GNU nano, version 6.1<br></code></pre></div></td></tr></table></figure><h3 id="高亮代码"><a href="#高亮代码" class="headerlink" title="高亮代码"></a>高亮代码</h3><p>Github网址:  <a href="https://github.com/scopatz/nanorc">nanorc</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/scopatz/nanorc.git $install_path<br><span class="hljs-meta">//$</span><span class="bash">install_path是你想安装的地址，最好为user目录下</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">命令行执行<br>echo &quot;include $install_path/*.nanorc&quot; &gt;&gt; /etc/nanorc<br>cat $install_path/nanorc &gt;&gt; /etc/nanorc<br>//这段命令运行后出现：<br>//cat: $install_path : Is a directory<br>//没搞明白啥意思，运行再说吧<br></code></pre></div></td></tr></table></figure><p>然后打开nano配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo nano /etc/nanorc<br></code></pre></div></td></tr></table></figure><p>在文件里输入：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">//*为所有代码格式都高亮<br>include &quot;~/.nano/*.nanorc&quot;<br></code></pre></div></td></tr></table></figure><p><img src="/images/img/p10.jpg" alt="预览图"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nano</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim学习笔记</title>
    <link href="/2022/02/10/vim/"/>
    <url>/2022/02/10/vim/</url>
    
    <content type="html"><![CDATA[<h2 id="Vim的四种模式"><a href="#Vim的四种模式" class="headerlink" title="Vim的四种模式"></a>Vim的四种模式</h2><ol><li><h3 id="普通模式：主要用于浏览文件，或者执行复制，粘贴，删除之类的操作。"><a href="#普通模式：主要用于浏览文件，或者执行复制，粘贴，删除之类的操作。" class="headerlink" title="普通模式：主要用于浏览文件，或者执行复制，粘贴，删除之类的操作。"></a>普通模式：主要用于浏览文件，或者执行复制，粘贴，删除之类的操作。</h3><blockquote><p>​    通过hjkl来移动光标，或⬆️⬇️⬅️➡️</p><p>​    h –&gt; 左, j –&gt; 下,  k –&gt; 上, l –&gt; 右</p><p>​    w –&gt; 跳转到下一个单词的开头</p><p>​    w –&gt; 跳转到下一个单词的开头</p><p>​    gg–&gt; 回到文档最上方</p><p>​    G–&gt; 回到文档最下方</p><p>​    Ctrl + u –&gt; 向上翻页</p><p>​    Crtl + d –&gt; 向下翻页</p><p>​    yaw –&gt; 复制, yaw –&gt; yank all word</p><p>​    p–&gt; 粘贴</p><p>​    u –&gt; undo </p></blockquote></li><li><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><blockquote><p>​    i –&gt; 在光标之前输入</p><p>​    a –&gt; 在光标之后输入</p><p>​    I –&gt; 在此行开头进行输入</p><p>​    A –&gt; 在此行的末尾进行输入</p><p>​    ESC –&gt; 退出输入模式</p><p>​    cc –&gt; 删除此行并进入输入模式</p><p>​    c4j –&gt; 删除下四行并进入输入模式</p></blockquote></li><li><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><blockquote><p>​    : –&gt; 进入命令模式</p><p>​    q -&gt; enter 退出</p><p>​    w –&gt; write 覆写</p><p>​    wq –&gt; 保存并退出</p></blockquote></li><li><h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><blockquote><p>v –&gt; 进入可视模式</p></blockquote></li></ol><p>妈的，命令太几把多了，有空再学吧。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OCaml</title>
    <link href="/2022/02/09/%E5%AE%89%E8%A3%85ocaml/"/>
    <url>/2022/02/09/%E5%AE%89%E8%A3%85ocaml/</url>
    
    <content type="html"><![CDATA[<p>真鸡巴服了，学Scheme, Prolog就算了。还要学Ocaml，Ocaml又是个啥牛马  </p><hr><p><a href="https://ocaml.org/">OCaml官网</a></p><h2 id="安装OCaml"><a href="#安装OCaml" class="headerlink" title="安装OCaml"></a>安装OCaml</h2><h3 id="For-Linux-and-macOS-only"><a href="#For-Linux-and-macOS-only" class="headerlink" title="For Linux and macOS only"></a>For Linux and macOS only</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Homebrew</span><br>brew install opam<br></code></pre></div></td></tr></table></figure><p>然后安装OCaml编译器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> environment setup</span><br>opam init<br>eval `opam env`<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> install given version of the compiler</span><br>opam switch create 4.11.1<br>eval `opam env`<br></code></pre></div></td></tr></table></figure><p>然后OCaml就能够运行了，在终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">which</span> ocaml</span><br>/Users/frank/.opam/4.11.1/bin/ocaml<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> ocaml -version</span><br>The OCaml toplevel, version 4.11.1<br></code></pre></div></td></tr></table></figure><p>这个B不能够设置默认环境</p><p>就是说每次想要在终端打开OCaml环境，都要输入：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">eval `opam env`<br></code></pre></div></td></tr></table></figure><p>我试着把命令加入 .bash_profile文件中，没吊用，先这样吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ocaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云与夕阳</title>
    <link href="/2022/01/31/%E4%BA%91%E4%B8%8E%E5%A4%95%E9%98%B3/"/>
    <url>/2022/01/31/%E4%BA%91%E4%B8%8E%E5%A4%95%E9%98%B3/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/img/p1.jpg"><br><img src="/images/img/p2.jpg"><br><img src="/images/img/p3.jpg">  </p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>键盘</title>
    <link href="/2022/01/29/%E9%94%AE%E7%9B%98/"/>
    <url>/2022/01/29/%E9%94%AE%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="收藏一些喜欢的键盘；"><a href="#收藏一些喜欢的键盘；" class="headerlink" title="收藏一些喜欢的键盘；"></a>收藏一些喜欢的键盘；</h2><p><em>目前在使用的键盘是KBD67 Lite R3;<br>比较硬的Gasket套件，没什么软弹程度，轴体为金粉，声音还是挺好听的。<br>卫星轴用的是自带的，质量比较一般，钢丝音多少有点.<br>空格键会有跷跷板情况，拆解调教n次后解决，但是空格空腔音无解。</em><br><img src="/images/img/p7.jpg">  </p><h2 id="愿望清单："><a href="#愿望清单：" class="headerlink" title="愿望清单：  "></a>愿望清单：  </h2><p><em>corgi65(柯基65)；</em><br><img src="/images/img/p8.jpg"><br><em>Melody65</em><br><img src="/images/img/p9.jpg"><br><em>KBD D84</em><br><img src="/images/img/p6.jpg">  </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Butterly配置字数统计</title>
    <link href="/2021/10/13/Butterly%E9%85%8D%E7%BD%AE%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
    <url>/2021/10/13/Butterly%E9%85%8D%E7%BD%AE%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<hr><p>在Butterfly主题配置中，发现直接把wordcount改为true并不能使用字数统计的功能<br>查阅后发现需要安装字数统计的插件。<br>打开Terminal，进入blog文件夹，输入：  </p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-wordcount <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure>  <p>然后在主题配置文件 _config.yml 中进行以下配置:  </p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs YML"><span class="hljs-attr">wordcount:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_wordcount:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">min2read:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_wordcount:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure>  ]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo代码高亮设置</title>
    <link href="/2021/10/13/Hexo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/10/13/Hexo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>在全局配置文件 <em>_config.yml</em> 中，配置：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;  &#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树</title>
    <link href="/2021/10/13/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2021/10/13/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树node"><a href="#二叉搜索树node" class="headerlink" title="二叉搜索树node:  "></a>二叉搜索树node:  </h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">search</span><span class="hljs-params">(Node root, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Base Cases: root is null or key is present at root</span><br><span class="hljs-keyword">if</span> (root==<span class="hljs-keyword">null</span> || root.key==key)<br>    <span class="hljs-keyword">return</span> root;<br><span class="hljs-comment">// Key is greater than root&#x27;s key</span><br><span class="hljs-keyword">if</span> (root.key &lt; key)<br>   <span class="hljs-keyword">return</span> search(root.right, key);<br><span class="hljs-comment">// Key is smaller than root&#x27;s key</span><br><span class="hljs-keyword">return</span> search(root.left, key);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><br><span class="hljs-function">struct node* <span class="hljs-title">search</span><span class="hljs-params">(struct node* root, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Base Cases: root is null or key is present at root</span><br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span> || root-&gt;key == key)<br>   <span class="hljs-keyword">return</span> root;<br><br><span class="hljs-comment">// Key is greater than root&#x27;s key</span><br><span class="hljs-keyword">if</span> (root-&gt;key &lt; key)<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(root-&gt;right, key);<br> <br><span class="hljs-comment">// Key is smaller than root&#x27;s key</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">search</span>(root-&gt;left, key);<br>&#125;<br></code></pre></div></td></tr></table></figure>  <h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearchTree</span> </span>&#123;<br> <br><span class="hljs-comment">/* Class containing left</span><br><span class="hljs-comment">   and right child of current node</span><br><span class="hljs-comment"> * and key value*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">int</span> key;<br>    Node left, right;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> item)</span></span><br><span class="hljs-function">    </span>&#123;<br>        key = item;<br>        left = right = <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Root of BST</span><br>Node root;<br><span class="hljs-comment">// Constructor</span><br>BinarySearchTree()<br>&#123;<br>     root = <span class="hljs-keyword">null</span>;<br>&#125;<br><span class="hljs-comment">// This method mainly calls insertRec()</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>     root = insertRec(root, key);<br>&#125;<br><span class="hljs-comment">/* A recursive function to</span><br><span class="hljs-comment">   insert a new key in BST */</span><br><span class="hljs-function">Node <span class="hljs-title">insertRec</span><span class="hljs-params">(Node root, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br> <br>    <span class="hljs-comment">/* If the tree is empty,</span><br><span class="hljs-comment">       return a new node */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)<br>    &#123;<br>        root = <span class="hljs-keyword">new</span> Node(key);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br> <br>    <span class="hljs-comment">/* Otherwise, recur down the tree */</span><br>    <span class="hljs-keyword">if</span> (key &lt; root.key)<br>        root.left = insertRec(root.left, key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; root.key)<br>        root.right = insertRec(root.right, key);<br> <br>    <span class="hljs-comment">/* return the (unchanged) node pointer */</span><br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br> <br><span class="hljs-comment">// This method mainly calls InorderRec()</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     inorderRec(root);<br>&#125;<br> <br><span class="hljs-comment">// A utility function to</span><br><span class="hljs-comment">// do inorder traversal of BST</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inorderRec</span><span class="hljs-params">(Node root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        inorderRec(root.left);<br>        System.out.println(root.key);<br>        inorderRec(root.right);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Driver Code</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinarySearchTree tree = <span class="hljs-keyword">new</span> BinarySearchTree();<br> <br>    <span class="hljs-comment">/* Let us create following BST</span><br><span class="hljs-comment">          50</span><br><span class="hljs-comment">       /     \</span><br><span class="hljs-comment">      30      70</span><br><span class="hljs-comment">     /  \    /  \</span><br><span class="hljs-comment">   20   40  60   80 */</span><br>    tree.insert(<span class="hljs-number">50</span>);<br>    tree.insert(<span class="hljs-number">30</span>);<br>    tree.insert(<span class="hljs-number">20</span>);<br>    tree.insert(<span class="hljs-number">40</span>);<br>    tree.insert(<span class="hljs-number">70</span>);<br>    tree.insert(<span class="hljs-number">60</span>);<br>    tree.insert(<span class="hljs-number">80</span>);<br> <br>    <span class="hljs-comment">// print inorder traversal of the BST</span><br>    tree.inorder();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">// C++ program to demonstrate insertion</span><br><span class="hljs-comment">// in a BST recursively.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BST</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> data;<br>BST *left, *right;<br> <br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// Default constructor.</span><br><span class="hljs-built_in">BST</span>();<br> <br><span class="hljs-comment">// Parameterized constructor.</span><br><span class="hljs-built_in">BST</span>(<span class="hljs-keyword">int</span>);<br> <br><span class="hljs-comment">// Insert function.</span><br><span class="hljs-function">BST* <span class="hljs-title">Insert</span><span class="hljs-params">(BST*, <span class="hljs-keyword">int</span>)</span></span>;<br> <br><span class="hljs-comment">// Inorder traversal.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Inorder</span><span class="hljs-params">(BST*)</span></span>;<br>&#125;;<br> <br><span class="hljs-comment">// Default Constructor definition.</span><br>BST ::<span class="hljs-built_in">BST</span>()<br>: <span class="hljs-built_in">data</span>(<span class="hljs-number">0</span>)<br>, <span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>)<br>, <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>)<br>    &#123;<br>&#125;<br> <br><span class="hljs-comment">// Parameterized Constructor definition.</span><br>BST ::<span class="hljs-built_in">BST</span>(<span class="hljs-keyword">int</span> value)<br>&#123;<br>data = value;<br>left = right = <span class="hljs-literal">NULL</span>;<br>&#125;<br> <br><span class="hljs-comment">// Insert function definition.</span><br>BST* BST ::<span class="hljs-built_in">Insert</span>(BST* root, <span class="hljs-keyword">int</span> value)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!root)<br>    &#123;<br>        <span class="hljs-comment">// Insert the first node, if root is NULL.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">BST</span>(value);<br>    &#125;<br> <br><span class="hljs-comment">// Insert data.</span><br><span class="hljs-keyword">if</span> (value &gt; root-&gt;data)<br>&#123;<br>    <span class="hljs-comment">// Insert right node data, if the &#x27;value&#x27;</span><br>    <span class="hljs-comment">// to be inserted is greater than &#x27;root&#x27; node data.</span><br> <br>    <span class="hljs-comment">// Process right nodes.</span><br>    root-&gt;right = <span class="hljs-built_in">Insert</span>(root-&gt;right, value);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// Insert left node data, if the &#x27;value&#x27;</span><br>    <span class="hljs-comment">// to be inserted is greater than &#x27;root&#x27; node data.</span><br> <br>    <span class="hljs-comment">// Process left nodes.</span><br>    root-&gt;left = <span class="hljs-built_in">Insert</span>(root-&gt;left, value);<br>&#125;<br> <br><span class="hljs-comment">// Return &#x27;root&#x27; node, after insertion.</span><br><span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-comment">// Inorder traversal function.</span><br><span class="hljs-comment">// This gives data in sorted order.</span><br><span class="hljs-keyword">void</span> BST ::<span class="hljs-built_in">Inorder</span>(BST* root)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!root) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">Inorder</span>(root-&gt;left);<br>    cout &lt;&lt; root-&gt;data &lt;&lt; endl;<br>    <span class="hljs-built_in">Inorder</span>(root-&gt;right);<br>&#125;<br> <br><span class="hljs-comment">// Driver code</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BST b, *root = <span class="hljs-literal">NULL</span>;<br>    root = b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">50</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">30</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">20</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">40</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">70</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">60</span>);<br>    b.<span class="hljs-built_in">Insert</span>(root, <span class="hljs-number">80</span>);<br><br>    b.<span class="hljs-built_in">Inorder</span>(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure>  ]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Butterfly搭建博客</title>
    <link href="/2021/10/12/Hexo-Butterfly%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/12/Hexo-Butterfly%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>总结一下Hexo搭建博客的过程，以及配置Butterfly主题。<br>快速链接：<br><a href="https://nodejs.org/en/">Node.js</a><br><a href="https://git-scm.com/download">Git</a><br><a href="https://hexo.io/">hexo</a><br><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly官网</a><br><a href="https://butterfly.js.org/posts/21cfbf15/#%E6%87%89%E7%94%A8%E4%B8%BB%E9%A1%8C">Butterfly主题配置文档(主题配置完成后观看)</a>  </p><hr><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js  "></a>安装Node.js  </h2><p>根据系统选择对应的版本<br>官方下载链接：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>安装完成后，打开Terminal，输入  </p><div class="hljs code-wrapper"><pre><code class="hljs">node -v</code></pre></div><p>如果出现版本号，则安装成功</p><div class="hljs code-wrapper"><pre><code class="hljs">v14.16.0</code></pre></div><hr><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git  "></a>安装Git  </h2><p>根据系统选择对应的版本<br>官方下载链接：<a href="https://git-scm.com/download">https://git-scm.com/download</a><br>安装完成后，打开Terminal，输入  </p><div class="hljs code-wrapper"><pre><code class="hljs">git --version</code></pre></div><p>如果出现版本号，则安装成功</p><div class="hljs code-wrapper"><pre><code class="hljs">git version 2.33.0</code></pre></div><hr><h2 id="在Github中建立仓库"><a href="#在Github中建立仓库" class="headerlink" title="在Github中建立仓库"></a>在Github中建立仓库</h2><p>登陆到github<br>点击New repository<br>输入自己的用户名，加上.github.io的后缀<br>例如：你的名字是yourName，然后, repository 名字是 </p><div class="hljs code-wrapper"><pre><code class="hljs">yourName.github.io</code></pre></div><p>然后点击添加readme</p><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo官网：<a href="https://hexo.io/">https://hexo.io/</a><br>输入命令配置Hexo环境：</p><div class="hljs code-wrapper"><pre><code class="hljs">npm install hexo-cli -g</code></pre></div><p>找到自己存放代码的目录<br>打开Terminal,输入命令:</p><div class="hljs code-wrapper"><pre><code class="hljs">hexo init blog</code></pre></div><p>此时会自动生成Hexo Blog的文件夹<br>进入文件夹：</p><div class="hljs code-wrapper"><pre><code class="hljs">cd blog</code></pre></div><p>输入命令：  </p><div class="hljs code-wrapper"><pre><code class="hljs">npm install</code></pre></div><p>安装成功后输入：</p><div class="hljs code-wrapper"><pre><code class="hljs">hexo server / hexo s</code></pre></div><p>此时Hexo会在本地4000端口生成博客页面</p><div class="hljs code-wrapper"><pre><code class="hljs">http://localhost:4000/</code></pre></div><p>有时候在本地运行博客时候可能会出现端口占用的报错，此时我们可以更换端口：</p><div class="hljs code-wrapper"><pre><code class="hljs">hexo s -p 5000</code></pre></div><p>如果能够进入博客页面，则表示搭建成功。</p><hr><h2 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h2><p>进入Butterfly官网  <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly_Hexo</a>  </p><p>首先进入博客根目录：</p><div class="hljs code-wrapper"><pre><code class="hljs">cd /###/###/blog</code></pre></div><p>或运行命令</p><div class="hljs code-wrapper"><pre><code class="hljs">pwd</code></pre></div><p>来验证是否在博客根目录里</p><p>通过Git拉取Butterfly主题分支</p><div class="hljs code-wrapper"><pre><code class="hljs">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre></div><p>此时终端会自动进行安装配置，安装完成后，进入</p><div class="hljs code-wrapper"><pre><code class="hljs">blog/themes</code></pre></div><p>如果themes文件夹里有butterfly文件夹，则说明主题安装成功  </p><hr><h2 id="应用Butterfly主题："><a href="#应用Butterfly主题：" class="headerlink" title="应用Butterfly主题：  "></a>应用Butterfly主题：  </h2><p>首先进入博客根目录找到  </p><div class="hljs code-wrapper"><pre><code class="hljs">_config.yml</code></pre></div><p>这个文件是Hexo全局配置文件，推荐使用Vim，Vscode打开<br>打开_config.yml文件，下滑，找到：</p><div class="hljs code-wrapper"><pre><code class="hljs">Extensions/theme</code></pre></div><p>把初始主题 landscape 换成 butterfly，然后保存退出。</p><p>为了使配置生效，需要运行以下命令<br>首先进入管理员模式：</p><blockquote><p>win系统–&gt;以管理员身份打开cmd<br>mac&#x2F;linux系统，输入以下命令，此时会要求输入开机密码，进入管理员模式。  </p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">sudo su</code></pre></div><p>输入命令</p><div class="hljs code-wrapper"><pre><code class="hljs">清理缓存hexo clean生成配置文件 hexo generator or hexo g本地运行hexo server or hexo s</code></pre></div><p>此时便可以在本地窗口里查看博客页面</p><div class="hljs code-wrapper"><pre><code class="hljs">http://localhost:4000/</code></pre></div><hr><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>此前已经建立了博客的repository，<br>然后我们要建立本地和Github的连接<br>打开Terminal 或 Git Bash，输入：  </p><div class="hljs code-wrapper"><pre><code class="hljs">###为你Github用户名和邮箱git config --global user.name &quot;###&quot;git config --global user.email &quot;###&quot;、</code></pre></div><p>然后生成SSH key：</p><div class="hljs code-wrapper"><pre><code class="hljs">###为你的邮箱ssh-keygen -t rsa -C &quot;###&quot;</code></pre></div><p>然后打开Github：</p><blockquote><ol><li>在个人信息里找到Setting  </li><li>找到 SSH and GPG keys  </li><li>新建 SSH key，名字不重要</li><li>在Terminal 或 Git Bash输入</li></ol></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">cat ~/.ssh/id_rsa.pub</code></pre></div><blockquote><p>把输出的内容复制到SSH key文本框中,保存退出。<br>在Terminal中输入</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">ssh -T git@github.com</code></pre></div><blockquote><p>如果出现：</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">Warning: Permanently added the RSA host key for IP address &#39;140.82.112.3&#39; to the list of known hosts.Hi ###! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></div><blockquote><p>则配置成功</p></blockquote><p>此时进入blog文件夹下的全局配置文件 ——config.yml<br>找到最下面的deploy，修改为</p><div class="hljs code-wrapper"><pre><code class="hljs">//此处的deploy:Eason710085/Eason710085 为你的Github用户名type: &#39;git&#39;repo: https://github.com/Eason710085/Eason710085.github.io.gitbranch: master</code></pre></div><p>保存退出后，打开Terminal 或Git Bash，输入以下命令：</p><div class="hljs code-wrapper"><pre><code class="hljs">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre></div><p>此时会要求你输入Github账号密码<br>配置成功后，进入Github仓库，便可以看到本地文件已经成功部署到Github<br>输入：</p><div class="hljs code-wrapper"><pre><code class="hljs">//eason710085更换为你的用户名https://eason710085.github.io/</code></pre></div><p>便可以查看个人博客了；<br>如需自定义主题，查看  <a href="https://butterfly.js.org/posts/21cfbf15/#%E6%87%89%E7%94%A8%E4%B8%BB%E9%A1%8C">Butterfly主题配置文档</a><br>博客效果：</p><p><img src="/images/img/p4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秋天</title>
    <link href="/2021/10/07/%E7%A7%8B%E5%A4%A9/"/>
    <url>/2021/10/07/%E7%A7%8B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>Albany入秋了<br>此篇作为图片插入测试</p><hr><p><img src="/1.png">  </p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站收纳</title>
    <link href="/2021/10/07/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90/"/>
    <url>/2021/10/07/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="资源总结："><a href="#资源总结：" class="headerlink" title="资源总结：  "></a>资源总结：  </h1><p>本文主要用于收纳好用的资源网站:  </p><h2 id="学习："><a href="#学习：" class="headerlink" title="学习：  "></a>学习：  </h2><blockquote><p><a href="https://www.bilibili.com/video/BV1dW411M7xL?p=1">Linux教程</a><br><a href="https://www.bilibili.com/video/BV18J411W7cE">黑马Java</a><br><a href="http://www.tastones.com/">Tastones</a><br><a href="https://www.bilibili.com/video/BV1Y7411K7zz?from=search&seid=8580973503487331146">JavaWeb</a><br><a href="https://www.bilibili.com/video/BV18W411R7zk?from=search&seid=17877111963447710517">C语言</a><br><a href="https://www.bilibili.com/video/BV12b411K7Zu?from=search&seid=16349769595525714925">MySql</a><br><a href="https://www.bilibili.com/video/BV19E411D78Q?p=1">计算机网络</a><br><a href="https://www.bilibili.com/video/BV1b7411N798?p=9">数据结构</a><br><a href="https://www.bilibili.com/video/BV1BE411D7ii?from=search&seid=12710640673869775858">计算机组成原理</a><br><a href="https://www.bilibili.com/video/BV1zW411t7YE?from=search&seid=7845155837266962630">编译原理(哈工大)</a><br><a href="https://www.bilibili.com/video/BV1YE411D7nH?from=search&seid=10383858332115636775">操作系统</a>  </p></blockquote><hr><h2 id="技术："><a href="#技术：" class="headerlink" title="技术：  "></a>技术：  </h2><blockquote><p><a href="https://hexo.io/">Hexo</a><br><a href="https://easyhexo.com/">Easy Hexo</a><br><a href="https://github.com/Eason710085">Github</a><br><a href="https://www.iconfont.cn/">阿里矢量图标库</a><br><a href="https://fontawesome.com/">Font-Awsome</a><br><a href="https://fluid-dev.github.io/hexo-fluid-docs/">Fluid主题框架</a><br><a href="https://pic.netbian.com/">4k壁纸</a><br><a href="https://www.jetbrains.com/">Jetbrains</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学镜像站</a><br><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO">Win10镜像</a><br><a href="https://msdn.itellyou.cn/">MSDN</a><br><a href="https://htmlcolorcodes.com/">HTML取色卡</a>  </p></blockquote><hr><h2 id="生活："><a href="#生活：" class="headerlink" title="生活：  "></a>生活：  </h2><blockquote><p><a href="https://www.supremenewyork.com/index">Supreme</a><br><a href="https://www.ripndipclothing.com/">Ripndip</a><br><a href="https://www.stussy.com/">Stussy</a>  </p></blockquote><hr><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN:"></a>VPN:</h2><blockquote><p><a href="https://letsvpn.world/">快连VPN</a><br><a href="https://nordvpn.com/">NordVpn</a><br><a href="https://www.expressvpn.com/">ExpressVpn</a><br><a href="https://b.antss.me/">蚂蚁加速器</a><br><a href="https://www.xfjiasu.com/">旋风加速器</a>  </p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown摘要</title>
    <link href="/2021/10/06/%E9%9A%8F%E7%AC%94/"/>
    <url>/2021/10/06/%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>发现之前搭建的博客莫名其妙打不开了，索性全部删除重新来过。<br>这片文章主要用于记录一些markdown的使用教程。</p><hr><h3 id="关于标题"><a href="#关于标题" class="headerlink" title="关于标题"></a>关于标题</h3><hr><blockquote><p>一级标题&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>   二级标题——–  </p><blockquote><p>或者使用 #<br>   #一级标题<br>   ##二级标题<br>   ###三级标题<br>   ####四级标题<br>   #####五级标题<br>   ######六级标题  </p></blockquote></blockquote><h3 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h3><hr><blockquote><p>段落的换行是使用两个以上空格加上回车<br>   Markdown 可以使用以下几种字体: </p><blockquote><p><em>斜体文本</em>  (#)<br>   <strong>粗体文本</strong>  (##)<br>   <em><strong>粗斜体文本</strong></em>  (###)  </p></blockquote></blockquote><h3 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h3><blockquote><p>sticky: 1 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git上传分支密码验证失败解决办法</title>
    <link href="/2021/09/17/git%E4%B8%8A%E4%BC%A0%E5%88%86%E6%94%AF%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2021/09/17/git%E4%B8%8A%E4%BC%A0%E5%88%86%E6%94%AF%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>GitHub 在对 Git 操作进行身份验证时不再接受帐户密码了，<br>因此需要添加 PAT (Personal Access Token)  </p><h2 id="在Mac系统中："><a href="#在Mac系统中：" class="headerlink" title="在Mac系统中："></a>在Mac系统中：</h2><blockquote><ol><li>进入 Keychain Access  </li><li>搜索Github</li><li>找到 github.com –&gt;Intertent Account</li><li>勾选显示密码按钮</li><li>复制密钥</li></ol></blockquote><h2 id="Hexo部署到Github"><a href="#Hexo部署到Github" class="headerlink" title="Hexo部署到Github"></a>Hexo部署到Github</h2><blockquote><ol><li>使用命令:</li></ol></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">hexo d  </code></pre></div><blockquote><ol start="2"><li>输入Github账户： *******<br>输入GIthub密码：<em>此处填写密钥</em></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
